{"ast":null,"code":"var _jsxFileName = \"/Users/Tualim_1/Documents/react/section10/src/App.js\";\nimport React, { useState } from \"react\";\nimport Login from \"./components/Login/Login\";\nimport Home from \"./components/Home/Home\";\nimport MainHeader from \"./components/MainHeader/MainHeader\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  // const [isLoggedIn, setIsLoggedIn] = useState(false);\n\n  // useEffect(() => {\n  //   const storedUser = localStorage.getItem(\"isLoggedIn\");\n\n  //   if (storedUser === \"1\") {\n  //     setIsLoggedIn(true);\n  //   }\n  // }, []);\n\n  // const loginHandler = (email, password) => {\n  //   // We should of course check email and password\n  //   // But it's just a dummy/ demo anyways\n  //   localStorage.setItem(\"isLoggedIn\", \"1\");\n  //   setIsLoggedIn(true);\n  // };\n\n  // const logoutHandler = () => {\n  //   localStorage.removeItem(\"isLoggedIn\");\n  //   setIsLoggedIn(false);\n  // };\n\n  return (\n    /*#__PURE__*/\n    // <AuthContext.Provider\n    //   value={{ isLoggedIn: isLoggedIn, onLogout: logoutHandler }}\n    // >\n    // <MainHeader />\n    _jsxDEV(\"main\", {\n      children: [!isLoggedIn && /*#__PURE__*/_jsxDEV(Login, {\n        onLogin: loginHandler\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 25\n      }, this), isLoggedIn && /*#__PURE__*/_jsxDEV(Home, {\n        onLogout: logoutHandler\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 24\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this)\n    // </AuthContext.Provider>\n  );\n}\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","Login","Home","MainHeader","jsxDEV","_jsxDEV","App","children","isLoggedIn","onLogin","loginHandler","fileName","_jsxFileName","lineNumber","columnNumber","onLogout","logoutHandler","_c","$RefreshReg$"],"sources":["/Users/Tualim_1/Documents/react/section10/src/App.js"],"sourcesContent":["import React, { useState } from \"react\";\n\nimport Login from \"./components/Login/Login\";\nimport Home from \"./components/Home/Home\";\nimport MainHeader from \"./components/MainHeader/MainHeader\";\n\nfunction App() {\n  // const [isLoggedIn, setIsLoggedIn] = useState(false);\n\n  // useEffect(() => {\n  //   const storedUser = localStorage.getItem(\"isLoggedIn\");\n\n  //   if (storedUser === \"1\") {\n  //     setIsLoggedIn(true);\n  //   }\n  // }, []);\n\n  // const loginHandler = (email, password) => {\n  //   // We should of course check email and password\n  //   // But it's just a dummy/ demo anyways\n  //   localStorage.setItem(\"isLoggedIn\", \"1\");\n  //   setIsLoggedIn(true);\n  // };\n\n  // const logoutHandler = () => {\n  //   localStorage.removeItem(\"isLoggedIn\");\n  //   setIsLoggedIn(false);\n  // };\n\n  return (\n    // <AuthContext.Provider\n    //   value={{ isLoggedIn: isLoggedIn, onLogout: logoutHandler }}\n    // >\n      // <MainHeader />\n      <main>\n        {!isLoggedIn && <Login onLogin={loginHandler} />}\n        {isLoggedIn && <Home onLogout={logoutHandler} />}\n      </main>\n    // </AuthContext.Provider>\n  );\n}\n\nexport default App;\n"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AAEvC,OAAOC,KAAK,MAAM,0BAA0B;AAC5C,OAAOC,IAAI,MAAM,wBAAwB;AACzC,OAAOC,UAAU,MAAM,oCAAoC;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE5D,SAASC,GAAGA,CAAA,EAAG;EACb;;EAEA;EACA;;EAEA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;;EAEA;IAAA;IACE;IACA;IACA;IACE;IACAD,OAAA;MAAAE,QAAA,GACG,CAACC,UAAU,iBAAIH,OAAA,CAACJ,KAAK;QAACQ,OAAO,EAAEC;MAAa;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAG,EAC/CN,UAAU,iBAAIH,OAAA,CAACH,IAAI;QAACa,QAAQ,EAAEC;MAAc;QAAAL,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAG;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;IAEpD;EAAA;AAEJ;AAACG,EAAA,GAlCQX,GAAG;AAoCZ,eAAeA,GAAG;AAAC,IAAAW,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}